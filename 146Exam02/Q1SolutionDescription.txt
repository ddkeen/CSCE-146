David Keen
CSCE 146H
EXAM 2 QUESTION 1 SOULTUION DESCRIPTION

	We are asked to write a search algorithm of O(lg(n)) for a sorted Double array without any null elements. From our problem I can see that we must use a binary search because our Big O complexity is O(lg(n). I know this because each time we narrow down our search by dividing the array in half. This will only work with a sorted array because we always check the midpoint to see if the value we are trying to find is greater than or less than our midpoint, and we then search the right half or left half respectively. I used 2 methods in my solution, the first establishes the minimum and maximum indexes for the array by using 0 and its size - 1. It then calls the second search method that includes a minimum and maximum as its parameters. This second method first checks if the min index is greater than the max. If so, we have checked all possible elements and we have not found the element. It then establishes a midpoint of the array and checks if that midpoint is the same as the value. If not, it checks if the value is less than the midpoint, if so it recursively calls itself but with mid-1 as its max and the same min. If not, it knows the value is greater than the midpoint so it recursively calls itself but with the same max and mid+1 as its min. Either way it cuts itself in half and keeps doing so until it has found the value, or the min has become greater than the max meaning the value is not in the array. 